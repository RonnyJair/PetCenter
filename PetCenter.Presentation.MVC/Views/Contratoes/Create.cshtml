@model PetCenter.Common.Core.Entities.Contrato

@{
    ViewBag.Title = "Crear Contrato";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Contrato</h4>
        <hr />
        @Html.ValidationSummary(true)
        <div class="form-group">
            <div class="control-label col-md-2">Empleado</div>
            <div class="col-md-10">
                @Html.DropDownList("EmpleadoId", (IEnumerable<SelectListItem>)ViewData["EmpleadoId"],"Seleccionar", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.EmpleadoId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Es Afp</div>
            <div class="col-md-10">
                <div class="checkbox">
                     @Html.DropDownListFor(model => model.EsAfp, new List<SelectListItem>
                     { new SelectListItem{Text="Es AFP", Value="True"},
                        new SelectListItem{Text="No es AFP", Value="False"}}, "Seleccionar",  new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EsAfp, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Sueldo Base</div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.SueldoBase, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0", @step = "1", @value = "0" } })
                @Html.ValidationMessageFor(model => model.SueldoBase, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Ubigeo</div>
            <div class="col-md-10">
                @Html.DropDownList("UbigeoId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UbigeoId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Jornada de Trabajo</div>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JornadaTrabajo, new List<SelectListItem>
       { new SelectListItem{Text="8 HR", Value="8"},
         new SelectListItem{Text="4 HR", Value="4"}}, "Seleccionar", new { @class = "form-control" })
                  @Html.ValidationMessageFor(model => model.JornadaTrabajo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Renumeración en Letra</div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RenumeracionLetra, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RenumeracionLetra, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Fecha Inicio</div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaInicio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">Fecha Termino</div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaTermino, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaTermino, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            <div class="control-label col-md-2">Estado</div>
            <div class="col-md-10">
                
                @Html.DropDownListFor(model => model.Estado, new List<SelectListItem>
       { new SelectListItem{Text="Activo", Value="1"},
         new SelectListItem{Text="Inactivo", Value="0"}}, "Seleccionar",  new { @class = "form-control" })
                 @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-10">
                <div class="control-label col-md-2">Archivo</div>
                <input type="file" name="UploadFile" accept="application/pdf" id="txtUploadFile" class="btn btn-default makethispretty" data-buttonText="Sel." />
                <div id="lblMensajeCarga"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar a la Lista", "Index")
</div>
<script>
    $('#txtUploadFile').on('change', function (e) {
        debugger;
        var files = e.target.files;


        if (files.length > 0) {

            if (files[0].size >= 2 * 1024 * 1024) {
                alert("El maximo de tamaño es 2MB");
                var input = $("#txtUploadFile");
                input.replaceWith(input.val('').clone(true));
                $("lblMensajeCarga").append('');
                $("lblMensajeCarga").append('Seleccionar Item');
                return;
            }

            if (!files[0].type.match('application/pdf.*')) {
                alert("Solo archivos PDF");
                var input = $("#txtUploadFile");
                input.replaceWith(input.val('').clone(true));
                $("lblMensajeCarga").append('');
                $("lblMensajeCarga").append('Seleccionar Item');
                return;
            }
            

            var items = document.getElementById("EmpleadoId");
            var myID = items[items.selectedIndex].value;

            if (window.FormData !== undefined) {
                var data = new FormData();
                for (var x = 0; x < files.length; x++) {
                    data.append("file" + x, files[x]);
                }

                $.ajax({
                    type: "POST",
                    url: '/Contratoes/UploadHomeReport?id=' + myID,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        $("lblMensajeCarga").append(JSON.parse(result.responseText).Message);
                    },
                    error: function (xhr, status, p3, p4) {
                        var err = "Error " + " " + status + " " + p3 + " " + p4;
                        if (xhr.responseText && xhr.responseText[0] == "{")
                            err = JSON.parse(xhr.responseText).Message;
                        $("lblMensajeCarga").append('Error');
                    }
                });
            } else {
                alert("This browser doesn't support HTML5 file uploads!");
            }
        }
    });
</script>